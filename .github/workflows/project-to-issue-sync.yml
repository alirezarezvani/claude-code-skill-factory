name: Project Board to Issue Sync

on:
  projects_v2_item:
    types: [edited]

# Prevent sync loops and concurrent modifications
concurrency:
  group: project-sync-${{ github.event.projects_v2_item.node_id }}
  cancel-in-progress: false

jobs:
  sync-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Sync Project Status to Issue
        uses: anthropics/claude-code-action@v1
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            # Project Board to Issue Synchronization

            You are synchronizing status changes from the GitHub project board to the corresponding issue.

            ## Event Data

            **Project Item ID**: ${{ github.event.projects_v2_item.node_id }}
            **Project ID**: ${{ github.event.projects_v2_item.project_node_id }}
            **Content ID**: ${{ github.event.projects_v2_item.content_node_id }}
            **Changed By**: @${{ github.event.sender.login }}

            ## Your Task

            1. **Get the issue details** from the content node ID
            2. **Determine the new status** from the project item
            3. **Update the issue** with corresponding status label
            4. **Post a comment** for team visibility
            5. **Close/reopen issue** if status is "Done" or moved from "Done"

            ## Step-by-Step Instructions

            ### Step 1: Get Issue Information

            First, get the issue number from the content node ID:

            ```bash
            # The content_node_id format is like "I_kwDOxxxxx" or "PR_kwDOxxxxx"
            # We need to query the GitHub API to get the actual issue number

            CONTENT_ID="${{ github.event.projects_v2_item.content_node_id }}"

            # Query project item to get issue URL
            ISSUE_URL=$(gh api graphql -f query='
              query {
                node(id: "${{ github.event.projects_v2_item.node_id }}") {
                  ... on ProjectV2Item {
                    content {
                      ... on Issue {
                        number
                        url
                        state
                        title
                      }
                    }
                  }
                }
              }
            ' --jq '.data.node.content.url')

            # Extract issue number from URL
            ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')

            echo "Issue Number: $ISSUE_NUMBER"
            ```

            ### Step 2: Get Current Project Status

            Query the project item to get the current status column:

            ```bash
            STATUS=$(gh api graphql -f query='
              query {
                node(id: "${{ github.event.projects_v2_item.node_id }}") {
                  ... on ProjectV2Item {
                    fieldValues(first: 20) {
                      nodes {
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          field {
                            ... on ProjectV2SingleSelectField {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ' --jq '.data.node.fieldValues.nodes[] | select(.field.name == "Status") | .name')

            echo "Project Status: $STATUS"
            ```

            ### Step 3: Map Status to Label

            **Status Mapping**:
            - "To triage" â†’ `status: triage`
            - "Backlog" â†’ `status: backlog`
            - "Ready" â†’ `status: ready`
            - "In Progress" â†’ `status: in-progress`
            - "In Review" â†’ `status: in-review`
            - "Done" â†’ `status: done`

            ```bash
            case "$STATUS" in
              "To triage")
                NEW_LABEL="status: triage"
                ;;
              "Backlog")
                NEW_LABEL="status: backlog"
                ;;
              "Ready")
                NEW_LABEL="status: ready"
                ;;
              "In Progress")
                NEW_LABEL="status: in-progress"
                ;;
              "In Review")
                NEW_LABEL="status: in-review"
                ;;
              "Done")
                NEW_LABEL="status: done"
                ;;
              *)
                echo "Unknown status: $STATUS"
                exit 0
                ;;
            esac

            echo "Target Label: $NEW_LABEL"
            ```

            ### Step 4: Update Issue Labels

            Remove all old status labels and add the new one:

            ```bash
            # Get current labels
            CURRENT_LABELS=$(gh issue view $ISSUE_NUMBER --json labels --jq '[.labels[].name] | join(",")')

            # Remove all status: labels
            for label in "status: triage" "status: backlog" "status: ready" "status: in-progress" "status: in-review" "status: done"; do
              if echo "$CURRENT_LABELS" | grep -q "$label"; then
                gh issue edit $ISSUE_NUMBER --remove-label "$label" 2>/dev/null || true
              fi
            done

            # Add new status label
            gh issue edit $ISSUE_NUMBER --add-label "$NEW_LABEL"
            ```

            ### Step 5: Handle Issue State (Open/Closed)

            ```bash
            # Close issue if moved to "Done"
            if [ "$STATUS" = "Done" ]; then
              CURRENT_STATE=$(gh issue view $ISSUE_NUMBER --json state --jq '.state')
              if [ "$CURRENT_STATE" = "OPEN" ]; then
                gh issue close $ISSUE_NUMBER --reason completed
                echo "Issue closed (moved to Done)"
              fi
            else
              # Reopen issue if moved FROM "Done" to any other status
              CURRENT_STATE=$(gh issue view $ISSUE_NUMBER --json state --jq '.state')
              if [ "$CURRENT_STATE" = "CLOSED" ]; then
                gh issue reopen $ISSUE_NUMBER
                echo "Issue reopened (moved from Done)"
              fi
            fi
            ```

            ### Step 6: Post Status Change Comment

            ```bash
            gh issue comment $ISSUE_NUMBER --body "## ðŸ“Š Status Update

**Status changed to**: **$STATUS**

This issue was moved on the [@claude-skills-factory project board](https://github.com/users/alirezarezvani/projects/7) by @${{ github.event.sender.login }}.

---

*ðŸ¤– Automated by project-to-issue-sync workflow*"
            ```

            ### Step 7: Summary Output

            ```bash
            echo "âœ… Synchronization Complete"
            echo "Issue #$ISSUE_NUMBER updated:"
            echo "  - Status: $STATUS"
            echo "  - Label: $NEW_LABEL"
            echo "  - State: $(gh issue view $ISSUE_NUMBER --json state --jq '.state')"
            ```

            ## Error Handling

            - If issue number cannot be determined, exit gracefully (might be PR or non-issue item)
            - If status field is not found, skip sync (might not have status field yet)
            - If label operations fail, continue anyway (issue might be deleted)

            ## Sync Loop Prevention

            This workflow only reads from the project board and writes to issues.
            It does NOT modify the project board, preventing infinite loops.
            The issue-to-project-sync workflow handles the reverse direction.

            ## Now Execute

            Follow the steps above to synchronize the project board status change to the issue.

          claude_args: '--allowed-tools "Bash(gh issue:*),Bash(gh api:*)"'
