name: Issue to Project Board Sync

on:
  issues:
    types: [labeled, closed, reopened]

# Prevent sync loops and concurrent modifications
concurrency:
  group: issue-sync-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  sync-to-project:
    # Only run for status label changes or state changes
    if: |
      (github.event.action == 'labeled' && startsWith(github.event.label.name, 'status:')) ||
      github.event.action == 'closed' ||
      github.event.action == 'reopened'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Sync Issue to Project Board
        uses: anthropics/claude-code-action@v1
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            # Issue to Project Board Synchronization

            You are synchronizing issue changes to the GitHub project board status column.

            ## Issue Information

            **Issue Number**: #${{ github.event.issue.number }}
            **Issue Title**: "${{ github.event.issue.title }}"
            **Issue State**: ${{ github.event.issue.state }}
            **Action**: ${{ github.event.action }}
            **Changed By**: @${{ github.event.sender.login }}

            **Issue URL**: ${{ github.event.issue.html_url }}

            ## Your Task

            1. **Find the project item** for this issue on the @claude-skills-factory project board
            2. **Determine the target status** based on issue labels or state
            3. **Update the project item** status column
            4. **Add to project** if not already added

            ## Step-by-Step Instructions

            ### Step 1: Check if Issue is in Project

            First, check if the issue is already in the project:

            ```bash
            # Project owner: alirezarezvani
            # Project number: 7

            PROJECT_ITEM=$(gh api graphql -f query='
              query {
                repository(owner: "alirezarezvani", name: "claude-code-skill-factory") {
                  issue(number: ${{ github.event.issue.number }}) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          number
                        }
                      }
                    }
                  }
                }
              }
            ' --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == 7) | .id')

            if [ -z "$PROJECT_ITEM" ]; then
              echo "Issue not in project. Adding to project first..."
              gh project item-add 7 --owner alirezarezvani --url ${{ github.event.issue.html_url }}

              # Wait a moment for the item to be added
              sleep 2

              # Re-query to get the project item ID
              PROJECT_ITEM=$(gh api graphql -f query='
                query {
                  repository(owner: "alirezarezvani", name: "claude-code-skill-factory") {
                    issue(number: ${{ github.event.issue.number }}) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              ' --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == 7) | .id')
            fi

            echo "Project Item ID: $PROJECT_ITEM"
            ```

            ### Step 2: Determine Target Status

            Based on the event, determine what status the issue should be:

            ```bash
            # Get current labels on the issue
            LABELS=$(gh issue view ${{ github.event.issue.number }} --json labels --jq '[.labels[].name] | join(",")')
            ISSUE_STATE="${{ github.event.issue.state }}"

            echo "Current Labels: $LABELS"
            echo "Issue State: $ISSUE_STATE"

            # Determine target status based on labels (priority order)
            if [ "$ISSUE_STATE" = "closed" ]; then
              TARGET_STATUS="Done"
            elif echo "$LABELS" | grep -q "status: done"; then
              TARGET_STATUS="Done"
            elif echo "$LABELS" | grep -q "status: in-review"; then
              TARGET_STATUS="In Review"
            elif echo "$LABELS" | grep -q "status: in-progress"; then
              TARGET_STATUS="In Progress"
            elif echo "$LABELS" | grep -q "status: ready"; then
              TARGET_STATUS="Ready"
            elif echo "$LABELS" | grep -q "status: backlog"; then
              TARGET_STATUS="Backlog"
            elif echo "$LABELS" | grep -q "status: triage"; then
              TARGET_STATUS="To triage"
            else
              # No status label - default based on issue state
              if [ "$ISSUE_STATE" = "open" ]; then
                TARGET_STATUS="To triage"
              else
                TARGET_STATUS="Done"
              fi
            fi

            echo "Target Status: $TARGET_STATUS"
            ```

            ### Step 3: Get Project and Status Field IDs

            ```bash
            # Get the project ID and status field ID
            PROJECT_DATA=$(gh api graphql -f query='
              query {
                user(login: "alirezarezvani") {
                  projectV2(number: 7) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            ')

            PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.data.user.projectV2.id')
            STATUS_FIELD_ID=$(echo "$PROJECT_DATA" | jq -r '.data.user.projectV2.fields.nodes[] | select(.name == "Status") | .id')

            echo "Project ID: $PROJECT_ID"
            echo "Status Field ID: $STATUS_FIELD_ID"

            # Get the option ID for the target status
            STATUS_OPTION_ID=$(echo "$PROJECT_DATA" | jq -r --arg status "$TARGET_STATUS" '.data.user.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == $status) | .id')

            echo "Status Option ID: $STATUS_OPTION_ID"
            ```

            ### Step 4: Update Project Item Status

            ```bash
            if [ -n "$PROJECT_ITEM" ] && [ -n "$STATUS_OPTION_ID" ]; then
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: "'"$PROJECT_ID"'"
                      itemId: "'"$PROJECT_ITEM"'"
                      fieldId: "'"$STATUS_FIELD_ID"'"
                      value: {
                        singleSelectOptionId: "'"$STATUS_OPTION_ID"'"
                      }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '

              echo "‚úÖ Updated project item status to: $TARGET_STATUS"
            else
              echo "‚ö†Ô∏è Could not update project item. Missing PROJECT_ITEM or STATUS_OPTION_ID."
              exit 0
            fi
            ```

            ### Step 5: Post Confirmation Comment

            Only post a comment if this was triggered by a label change (not by issue close/reopen):

            ```bash
            if [ "${{ github.event.action }}" = "labeled" ]; then
              gh issue comment ${{ github.event.issue.number }} --body "## üîÑ Project Board Updated

**Status**: Issue moved to **$TARGET_STATUS** on the [@claude-skills-factory project board](https://github.com/users/alirezarezvani/projects/7).

---

*ü§ñ Automated by issue-to-project-sync workflow*"
            fi
            ```

            ### Step 6: Summary Output

            ```bash
            echo "‚úÖ Synchronization Complete"
            echo "Issue #${{ github.event.issue.number }} ‚Üí Project Status: $TARGET_STATUS"
            ```

            ## Error Handling

            - If project item not found and adding fails, exit gracefully
            - If status field or option not found, skip update (project might not have Status field)
            - If GraphQL query fails, log error and continue

            ## Sync Loop Prevention

            This workflow only reads from issues and writes to project board.
            It does NOT modify issue labels or state, preventing infinite loops.
            The project-to-issue-sync workflow handles the reverse direction.

            The concurrency control also ensures only one sync runs at a time per issue.

            ## Now Execute

            Follow the steps above to synchronize the issue change to the project board.

          claude_args: '--allowed-tools "Bash(gh issue:*),Bash(gh api:*),Bash(gh project:*)"'
